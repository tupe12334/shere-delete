/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, Woman, Man } from "@prisma/client";

export class WomanServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.WomanFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WomanFindManyArgs>
  ): Promise<number> {
    return this.prisma.woman.count(args);
  }

  async findMany<T extends Prisma.WomanFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.WomanFindManyArgs>
  ): Promise<Woman[]> {
    return this.prisma.woman.findMany(args);
  }
  async findOne<T extends Prisma.WomanFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.WomanFindUniqueArgs>
  ): Promise<Woman | null> {
    return this.prisma.woman.findUnique(args);
  }
  async create<T extends Prisma.WomanCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WomanCreateArgs>
  ): Promise<Woman> {
    return this.prisma.woman.create<T>(args);
  }
  async update<T extends Prisma.WomanUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.WomanUpdateArgs>
  ): Promise<Woman> {
    return this.prisma.woman.update<T>(args);
  }
  async delete<T extends Prisma.WomanDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.WomanDeleteArgs>
  ): Promise<Woman> {
    return this.prisma.woman.delete(args);
  }

  async getMan(parentId: string): Promise<Man | null> {
    return this.prisma.woman
      .findUnique({
        where: { id: parentId },
      })
      .man();
  }
}
